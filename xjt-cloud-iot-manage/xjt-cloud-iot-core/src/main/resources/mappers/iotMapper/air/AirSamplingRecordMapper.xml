<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xjt.cloud.iot.core.dao.iot.air.AirSamplingRecordDao">

    <resultMap id="airSamplingRecordResultMap" type="com.xjt.cloud.iot.core.entity.air.AirSamplingRecord">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="project_id" property="projectId" jdbcType="BIGINT"/>
        <result column="check_point_id" property="checkPointId" jdbcType="BIGINT"/>
        <result column="device_id" property="deviceId" jdbcType="BIGINT"/>
        <result column="device_id" property="deviceId" jdbcType="BIGINT"/>
        <result column="device_coding" property="deviceCoding" jdbcType="VARCHAR"/>
        <result column="pipeline_max_value" property="pipelineMaxValue" jdbcType="INTEGER"/>
        <result column="pipeline_min_value" property="pipelineMinValue" jdbcType="INTEGER"/>
        <result column="pipeline_value_1" property="pipelineValue1" jdbcType="INTEGER"/>
        <result column="pipeline_value_2" property="pipelineValue2" jdbcType="INTEGER"/>
        <result column="pipeline_status_1" property="pipelineStatus1" jdbcType="INTEGER"/>
        <result column="pipeline_status_2" property="pipelineStatus2" jdbcType="INTEGER"/>
        <result column="smog_value" property="smogValue" jdbcType="INTEGER"/>
        <result column="deviation_set" property="deviationSet" jdbcType="INTEGER"/>
        <result column="deviation_value_1" property="deviationValue1" jdbcType="INTEGER"/>
        <result column="deviation_value_2" property="deviationValue2" jdbcType="INTEGER"/>
        <result column="deviation_status" property="deviationStatus" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="data_update_time" property="dataUpdateTime" jdbcType="TIMESTAMP"/>
        <result column="time_desc" property="timeDesc" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="findAirSamplingWhere">
        <if test="qrNo != null and qrNo != ''">
            AND cp.qr_no LIKE CONCAT('%',#{qrNo},'%')
        </if>
        <if test="deviceCoding != null and deviceCoding != ''">
            AND asr.device_coding LIKE CONCAT('%',#{deviceCoding},'%')
        </if>
        <if test="projectId != null and projectId != 0">
            AND asr.project_id = #{projectId}
        </if>
        <if test="airSamplingId != null and airSamplingId != 0">
            AND asr.air_sampling_id = #{airSamplingId}
        </if>
        <if test="airSamplingIds != null">
            AND  asr.air_sampling_id IN
            <foreach item="item" collection="airSamplingIds" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="pipelineStatus1 != null and pipelineStatus1 != 0">
            AND asr.pipeline_status_1 = #{pipelineStatus1}
        </if>
        <if test="pipelineStatus2 != null and pipelineStatus2 != 0">
            AND asr.pipeline_status_2 =  #{pipelineStatus2}
        </if>
        <if test="pipelineStatus != null and pipelineStatus != 0">
            <if test="pipelineStatus == 1">
                AND asr.pipeline_status_1 =  1 AND asr.pipeline_status_2 =  1
            </if>
            <if test="pipelineStatus == 2">
                AND (asr.pipeline_status_1 >=  2 OR asr.pipeline_status_2 >=  2)
            </if>
        </if>

        <if test="pipelineStatuss1 != null">
            AND asr.pipeline_status_1 IN
            <foreach item="item" collection="pipelineStatuss1" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="pipelineStatuss2 != null">
            AND asr.pipeline_status_2 IN
            <foreach item="item" collection="pipelineStatuss2" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="createTime != null">
            AND asr.create_time BETWEEN #{createTime} AND #{endTimeDesc}
        </if>
    </sql>
    <!--根据条件查询查询空气采样记录列表-->
    <select id="findAirSamplingRecordList" parameterType="AirSamplingRecord" resultMap="airSamplingRecordResultMap">
        SELECT asr.*,DATE_FORMAT(asr.create_time,'%H:%i') time_desc,
        cp.qr_no qrNo,cp.point_location pointLocation,cp.building_id buildingId,cp.building_floor_id buildingFloorId
        FROM a_air_sampling_record asr
        INNER JOIN device_manage.d_check_point cp ON cp.id = asr.check_point_id AND cp.status &lt;= 98
        WHERE asr.status &lt;= 98
        <include refid="findAirSamplingWhere"/>
        <include refid="CommonSqlDao.commonPagingHandle"/>
    </select>

    <!--根据条件查询查询空气采样记录列表总数-->
    <select id="findAirSamplingRecordListTotalCount" parameterType="AirSamplingRecord" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT asr.id)
        FROM a_air_sampling_record asr
        INNER JOIN device_manage.d_check_point cp ON cp.id = asr.check_point_id AND cp.status &lt;= 98
        WHERE asr.status &lt;= 98
        <include refid="findAirSamplingWhere"/>
    </select>
    <!-- 查询空气采样记录　曲线图-->
    <select id="findAirSamplingRecordGraph" parameterType="WaterRecord" resultMap="airSamplingRecordResultMap">
        SELECT asr.air_sampling_id,IFNULL(asr.pipeline_value_1,0) pipeline_value_1,
        IFNULL(asr.pipeline_value_2,0) pipeline_value_2, IFNULL(asr.smog_value,0) smog_value,IFNULL(asr.deviation_value_1,0) deviation_value_1,
        IFNULL(asr.deviation_value_2,0) deviation_value_2,<include refid="formatTimeCol"></include> time_desc
        FROM (
            SELECT asr.air_sampling_id,MAX(asr.pipeline_value_1) pipeline_value_1,
            MAX(asr.pipeline_value_2) pipeline_value_2, MAX(asr.smog_value) smog_value,
            MAX(asr.deviation_value_1) deviation_value_1,
            MAX(asr.deviation_value_2) deviation_value_2,
            <include refid="formatTime"></include>
            FROM a_air_sampling_record asr
            WHERE asr.status &lt;= 98
            <include refid="findAirSamplingWhere"/>
            GROUP BY createTime
        ) asr RIGHT JOIN (
        <include refid="formatTimeRow"></include>
        ) dayList
        ON <include refid="formatTimeOn"></include>
        ORDER BY time_desc
    </select>

    <sql id="formatTimeCol">
        <if test="groupType != null and groupType == 1">
            DATE_FORMAT(dayList.createTime,'%H:%i')
        </if>
        <if test="groupType != null and groupType == 2">
            DATE_FORMAT(dayList.createTime,'%Y-%m-%d')
        </if>
        <if test="groupType != null and groupType == 3">
            DATE_FORMAT(dayList.createTime,'%Y-%m')
        </if>
        <if test="groupType != null and groupType == 4">
            DATE_FORMAT(dayList.createTime,'%Y')
        </if>
    </sql>
    <sql id="formatTime">
        <if test="groupType != null and groupType == 1">
            DATE_FORMAT(asr.create_time,'%H') createTime
        </if>
        <if test="groupType != null and groupType == 2">
            DATE_FORMAT(asr.create_time,'%Y-%m-%d') createTime
        </if>
        <if test="groupType != null and groupType == 3">
            DATE_FORMAT(asr.create_time,'%Y-%m') createTime
        </if>
        <if test="groupType != null and groupType == 4">
            DATE_FORMAT(asr.create_time,'%Y') createTime
        </if>
    </sql>
    <sql id="formatTimeRow">
        SELECT
        <if test="groupType != null and groupType == 1">
            @date := DATE_FORMAT(DATE_ADD(@date, interval 1 ${timeType}),'%Y-%m-%d %H') createTime
        </if>
        <if test="groupType != null and groupType != 1">
            @date := DATE_FORMAT(DATE_ADD(@date, interval 1 ${timeType}),'%Y-%m-%d') createTime
        </if>
        FROM (
        SELECT @date := DATE_ADD(#{createTime}, interval -1 ${timeType}) FROM b_base_data LIMIT #{dateTimeCount}) days
    </sql>
    <sql id="formatTimeOn">
        <if test="groupType != null and groupType == 1">
            asr.createTime = DATE_FORMAT(dayList.createTime,'%H')
        </if>
        <if test="groupType != null and groupType == 2">
            asr.createTime = DATE_FORMAT(dayList.createTime,'%Y-%m-%d')
        </if>
        <if test="groupType != null and groupType == 3">
            asr.createTime = DATE_FORMAT(dayList.createTime,'%Y-%m')
        </if>
        <if test="groupType != null and groupType == 4">
            asr.createTime = DATE_FORMAT(dayList.createTime,'%Y')
        </if>
    </sql>

    <insert id="saveAirSamplingRecord" parameterType="AirSamplingRecord" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO a_air_sampling_record (project_id, check_point_id, device_id, device_coding, air_sampling_id, pipeline_min_value, pipeline_max_value,
        pipeline_value_1, pipeline_value_2, pipeline_status_1, pipeline_status_2, smog_value, deviation_set, deviation_value_1, deviation_status,
        status, create_time, deviation_value_2) VALUES
        (#{projectId}, #{checkPointId}, #{deviceId}, #{deviceCoding}, #{airSamplingId}, #{pipelineMinValue}, #{pipelineMaxValue},
        #{pipelineValue1}, #{pipelineValue2}, #{pipelineStatus1}, #{pipelineStatus2}, #{smogValue}, #{deviationSet}, #{deviationValue1},#{deviationStatus},
        1, NOW(), #{deviationValue2});
    </insert>
</mapper>
