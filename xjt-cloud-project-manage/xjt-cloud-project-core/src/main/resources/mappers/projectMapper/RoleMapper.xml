<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.xjt.cloud.project.core.dao.project.RoleDao">


    <resultMap id="projectRoleResultMap" type="com.xjt.cloud.project.core.entity.Role">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="role_name" property="roleName" jdbcType="VARCHAR"/>
        <result column="super_admin" property="superAdmin" jdbcType="INTEGER"/>
        <result column="source_id" property="sourceId" jdbcType="BIGINT"/>
        <result column="is_admin" property="isAdmin" jdbcType="INTEGER"/>
        <result column="is_ordinary" property="isOrdinary" jdbcType="INTEGER"/>
    </resultMap>

    <!--添加角色-->
    <insert id="addProjectRole" parameterType="Role" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO `p_role` (`role_name`, `source_type`,`super_admin`,create_time)
        VALUES ( #{roleName},
                 #{sourceType},
                 #{superAdmin},
                 now()
         )
    </insert>
    <!--添加角色-->
    <insert id="addProjectRoleCV5" parameterType="Role" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO `p_role` (`role_name`, `source_type`, `source_id`, `is_admin`,`create_user_id`, `is_ordinary` ,`create_user_name`)
        VALUES ( #{roleName},
                 #{sourceType},
                 #{sourceId},
                 #{isAdmin},
                 #{createUserId},
                 #{isOrdinary},
                 #{createUserName}
         )
    </insert>


    <!--删除角色-->
    <delete id="deleteProjectRole" parameterType="java.util.List">
        DELETE FROM `p_role` WHERE id IN
        <foreach collection="list" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

    <!--更新角色信息-->
    <update id="updateProjectRole" parameterType="Role">
       UPDATE `p_role` SET
       `role_name` = #{roleName},`update_user_id` = #{updateUserId}, `update_user_name` = #{updateUserName}
       WHERE `id` = #{id}
    </update>


    <select id="findByProjectRoleList" resultMap="projectRoleResultMap" parameterType="Role">
        SELECT o.id , o.role_name, t.permission_name menuName, t.sign  menuSign, t.sort menuSort, p.permission_name permissionName, p.sign, p.parent_id, p.sort
        FROM p_role o
        LEFT JOIN p_role_permission rp ON o.id = rp.role_id
        LEFT JOIN p_permission p ON p.id = rp.permission_id AND p.parent_id > 0
        LEFT JOIN ( SELECT * FROM p_permission WHERE parent_id = 0 AND status = 1 AND per_type = 2) t ON t.id = p.parent_id
        WHERE o.source_type = 2 AND o.status=1 AND p.status = 1 AND rp.status = 1 AND t.status = 1
        ORDER BY o.id, menuSort , t.parent_id, t.sort
    </select>
    <select id="findByProjectRoleListCV5" resultMap="projectRoleResultMap" parameterType="Role">
        SELECT o.id ,o.role_name ,o.source_id,o.is_admin,o.is_ordinary from p_role o where o.source_id =#{sourceId} and o.source_type = 2
        <if test="roleName != null">
            and o.role_name = #{roleName}
        </if>
        order  by o.is_admin,is_ordinary asc
    </select>

    <select id="findByProjectRole" resultMap="projectRoleResultMap" parameterType="Role">
        SELECT o.id ,o.role_name ,o.super_admin FROM p_role o WHERE o.source_type = 2
        <if test="roleName != null">
            and o.role_name = #{roleName}
        </if>
        <if test="id != null">
            and o.id = #{id}
        </if>
        <if test="superAdmin != null">
            and o.super_admin = #{superAdmin}
        </if>
        limit 1
    </select>

    <select id="findByProjectRoleCV5" resultMap="projectRoleResultMap" parameterType="Role">
        SELECT o.id ,o.role_name ,o.source_id ,o.is_admin,o.is_ordinary from p_role o where o.source_type = 2
        <if test="sourceId != null and sourceId != 0">
            and o.source_id =#{sourceId}
        </if>
        <if test="isOrdinary != null and isOrdinary != 0">
            and o.is_ordinary = #{isOrdinary}
        </if>
        <if test="roleName != null">
            and o.role_name = #{roleName}
        </if>
        <if test="id != null">
            and o.id = #{id}
        </if>
        limit 1
    </select>

    <select id="findByProjectRoleId" resultMap="projectRoleResultMap" parameterType="Role">
        SELECT o.id ,o.role_name ,o.super_admin from p_role o where o.id in
        <foreach collection="list" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>
    <select id="findByProjectRoleIdCV5" resultMap="projectRoleResultMap" parameterType="Role">
        SELECT o.id ,o.role_name ,o.source_id,o.is_admin,o.is_ordinary from p_role o where o.id in
        <foreach collection="list" item="id" index="index" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>

    <!-- ##########################成员管理 #####################-->
    <!--查询角色是否存在 -->
    <select id="findRoleByNames" parameterType="java.lang.String" resultMap="projectRoleResultMap">
        SELECT id, role_name ,super_admin FROM p_role r
        WHERE source_type = 2 AND source_id = #{projectId} AND role_name IN (${sql})
    </select>

    <!--查询角色是否存在 -->
    <select id="findRoleByNamesCV5" parameterType="java.lang.String" resultMap="projectRoleResultMap">
        SELECT id, role_name ,is_admin,is_ordinary FROM p_role r
        WHERE source_type = 2 AND source_id = #{projectId} AND role_name IN (${sql})
    </select>


</mapper>